version: '3.8'

networks:
  kafka-spark:
    name: kafka-spark
    driver: bridge

services:

  consumer:
    image: python:3.10.6-buster
    build:
      context: .
      dockerfile: ./docker/consumer.Dockerfile
    command: python /consumer.py
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - ./src/consumer.py:/consumer.py
      - ./src/requirements.txt:/requirements.txt
    networks:
      - kafka-spark
    environment:
      - KAFKA_SERVERS=kafka1:9091,kafka2:9092,kafka3:9093

  producer:
    image: python:3.10.6-buster
    build:
      context: .
      dockerfile: ./docker/producer.Dockerfile
    command: python /producer.py
    deploy:
      mode: replicated
      replicas: 5
    volumes:
      - ./src/producer.py:/producer.py
      - ./src/requirements.txt:/requirements.txt
    networks:
      - kafka-spark
    environment:
      - KAFKA_SERVERS=kafka1:9091,kafka2:9092,kafka3:9093

  zookeeper:
    container_name: zookeeper
    image: zookeeper:3.4.9
    networks:
      - kafka-spark
    restart: always
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zookeeper:2888:3888

  kafka1:
    container_name: kafka1
    image: confluentinc/cp-kafka:latest
    networks:
      - kafka-spark
    depends_on:
      - zookeeper
    ports:
      - 9091:9091
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19091,LISTENER_DOCKER_EXTERNAL://kafka1:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"

  kafka2:
    container_name: kafka2
    image: confluentinc/cp-kafka:latest
    networks:
      - kafka-spark
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19092,LISTENER_DOCKER_EXTERNAL://kafka2:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"

  kafka3:
    container_name: kafka3
    image: confluentinc/cp-kafka:latest
    networks:
      - kafka-spark
    depends_on:
      - zookeeper
    ports:
      - 9093:9093
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19093,LISTENER_DOCKER_EXTERNAL://kafka3:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"

  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop:latest
    networks:
      - kafka-spark
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka1:19091,kafka2:19092,kafka3:19093